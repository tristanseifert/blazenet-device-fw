#ifndef BLAZENET_TYPES_BEACON_H
#define BLAZENET_TYPES_BEACON_H

#include <stddef.h>
#include <stdint.h>

#include <BlazeNet/Types/Mac.h>

/**
 * @brief Beacon frames
 */
namespace BlazeNet::Types::Beacon {
/**
 * @brief Beacon header flags
 */
enum HeaderFlags: uint8_t {
    /**
     * @brief Network is joinable for new devices
     *
     * Indicates that in-band pairing of devices is possible on this network.
     */
    PairingEnable                       = (1 << 0),
};

/**
 * @brief Generic beacon frame header
 *
 * This structure encompasses the mandatory header that all beacon frames carry. It has the basic
 * network information needed to associate, and indicates if any bonus headers follow.
 *
 * @remark The coordinator's address is taken from the "source" field in the MAC header.
 */
struct Header {
    /**
     * @brief Protocol version
     *
     * Indicates the version of the BlazeNet protocol in use; increase this any time a non-
     * compatible change in the packet formats is made. This relies on the PHY/MAC layer staying
     * constant, so that we can actually read this field in the beacon.
     */
    uint8_t version;

    /**
     * @brief Beacon flags
     *
     * Defines some generic flags defining network operation.
     *
     * @seeAlso HeaderFlags
     */
    uint8_t flags;

    /**
     * @brief Network id
     *
     * A 16-byte quantity that's used to uniquely identify the network. This should typically be
     * an UUID generated by the coordinator, but it can be any blob of data; it SHOULD be formatted
     * as a hexadecimal string when displayed to the user.
     */
    uint8_t id[16];
} __attribute__((packed));
};

#endif
